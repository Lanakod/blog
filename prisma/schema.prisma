// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  role          Role                @default(READER)
  likes         UserPostLikes[]
  bookmarks     UserPostBookmarks[]
}

enum Role {
  READER
  WRITER
  ADMIN
}

model UserPostLikes {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model UserPostBookmarks {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model Post {
  id         String              @id @default(cuid())
  title      String
  content    String
  image      String?
  author     User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  category   Category            @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  categoryId String
  likes      UserPostLikes[]
  bookmarks  UserPostBookmarks[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now())
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}
